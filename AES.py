import random

def multGF256o(p,q):
    # Multiply p*q modulo M = x^8+x^4+x^3+x+1
    # assume that p and q are both 8-bit values
    # or make a table of all 256 values
    m = 0x11b
    r = 0
    while q:
        if q&1:
            r ^= p
        p <<= 1
        if p&0x100:
            p ^= m
        q >>= 1
    return r
def multGF256(p,q):
  # Multiply p*q modulo m = x^8 + x^4 + x^3 + x + 1
  # assume that p and q are 8 bit values encoding polynomials
  # (aka elements of GF(2**8)).

  m = 0x11b # The modulus for GF(2**8)

  r = 0
  while q: # Loop through coefficients of q
    # add p if needed
    if q&1:
      r ^= p

    # p = p*x (mod m)
    p <<= 1 # multiply by polynomial x
    if p&0x100: # subtract m if needed
      p ^= m

    # shift q
    q >>= 1
  return r

# Rijndael S-box
sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16]
# Rijndael Inverted S-box
sbox_inv = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
            0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
            0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
            0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
            0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
            0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
            0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
            0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
            0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
            0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
            0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
            0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
            0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
            0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
            0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
            0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
            0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
            0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
            0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
            0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
            0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
            0x21, 0x0c, 0x7d]
# Rijndael Rcon
Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb ]

def bitstring_to_kbit_stream(n, num_words, k=8):
    """
    Convery a string of bits (an int) into a stream of kbit blocks
    """
    mask = (1<<k)-1
    for i in range(num_words):
        yield n&mask
        n >>= k
def create_state(inp,num_blocks):
    """
    Convert a single int of num_blocks*4 bits into a Rijdael state
    """
    return [list(bitstring_to_kbit_stream(b,4,8))
        for b in bitstring_to_kbit_stream(inp,num_blocks,32)]

def unpack_state(inp,num_blocks):
    """
    Convert a single int of num_blocks*4 bits into a Rijdael state
    """
    return [list(bitstring_to_kbit_stream(b,4,8))
        for b in bitstring_to_kbit_stream(inp,num_blocks,32)]
def pack_state(state,num_blocks):
    result = 0
    for r in range(num_blocks):
        for c in range(4):
            result <<= 8
            result |= state[-(r+1)][-(c+1)]
    return result
def state_to_str(state, num_blocks):
    """
    Convert a Rijndael state into a human readable
    string for debugging
    """
    s = ""
    for r in range(4):
        for c in range(num_blocks):
            s += "%02x "%state[r][c]
        s += "\n"
    """for c in range(num_blocks):
        s += "%02x "%state[r][c]"""
    return s

def sub_bytes(state, num_blocks, table):
    """In palce substitution using the givien table
        used for both forward and back"""
    for c in range(num_blocks):
        for r in range(4):
            state[r][c] = table[state[r][c]%256]
    return state

def shift_row(arr, offset):
    idx = -offset%(len(arr))
    return arr[idx:] + arr[:idx]

def shift_rows(state, nb, dir):
    newstate = []
    for c in range(nb):
        newstate.append(shift_row(state[c], c*dir))
        #newstate[c] = shift_row(state[c], c*dir)
    return newstate

def matrix_mult(b,a):
    if len(b[0])!=len(a):
        return "Nope"
    else:
        res = [[0 for i in range(len(a[0]))]for j in range(len(b))]
        for i in range(len(b)):
            for j in range(len(a[0])):
                for k in range(len(a)):
                    res[i][j]^= multGF256(b[i][k],a[k][j])
        return res

def mix_columns(state, nb):
    aofx = [[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]]
    newmatrix = []
    for c in range(nb):
        newmatrix.append(matrix_mult(aofx,[[state[i][c]] for i in range(len(state[0]))]))
    newmatrix1 = [[0 for i in range(len(aofx))]for j in range(len(state[0]))]
    for i in range(len(newmatrix1)):
        for j in range(len(newmatrix1[0])):
            newmatrix1[i][j] = newmatrix[j][i][0]
    return newmatrix1

def mix_columns_inv(state, nb):
    newstate = state
    for i in range(nb-1):
        newstate = mix_columns(newstate, nb)
    return newstate

def rot_word(word):
    word = word[1:] + word[:1]
    return word

def sub_word(word):
    return (sbox[b] for b in word)

def word(a,b,c,d):
    return (d<<24)|(c<<16)|(b<<8)|a

def phrase(input):
    arr = []
    out = 0
    for e in input:
        arr.append(ord(e))
    for i in range(len(arr)):
        out |= arr[i]<<8*i
    return out

def invphrase(numPhrase):
    out = ""
    arr = []
    string = str(hex(numPhrase))
    for i in range(len(string)//2):
        arr.append(string[2*i:2*i+2])
    arr = arr[::-1]
    for j in range(len(arr)):
        arr[j] = "0x"+arr[j]
    for a in range(len(arr)-1):
        out += chr(int(arr[a], 16))
    return out

def wordArrV(arr):
    return (arr[3] << 24) | (arr[2] << 16) | (arr[1] << 8) | arr[0]

def bits2Byte(arr):
    return ((arr[7]<<7)|(arr[6]<<6)|(arr[5]<<5)|(arr[4]<<4)|(arr[3]<<3)|(arr[2]<<2)|(arr[1]<<1)|(arr[0]))

def rotateword(word):
    w= inverseWord(word)
    w = w[1:] + w[:1]
    return wordArrV(w)

def subWord2(word):
    w = inverseWord(word)
    for i in range(len(w)):
        w[i] = sbox[w[i]]
    return wordArrV(w)

def inverseWord(word):
    w = []
    for j in range(4):
        f = []
        for i in range(8):
            f.append(word%2)
            word>>=1
        w.append(bits2Byte(f))
    return w

def key_expansion(key, nb, nk, nr):
    i = 0
    w = []
    while(i<nk):
        w.append(word(key[4*i],key[4*i+1],key[4*i+2],key[4*i+3]))
        i+=1

    i = nk
    while(i < (nb * (nr+1))):
        temp = w[i-1]
        if(i % nk ==0):
            temp = subWord2(rotateword(temp)) ^ Rcon[i%256]
        elif(nk > 6 and i % nk == 4):
            temp = subWord2(temp)
        w.append(w[i-nk]^temp)
        i += 1
    for i in range(nb*(nr+1)):
        w[i] = w[i]%256
    return w

def add_round_key(arr, key, nb):
    for i in range(nb):
        for j in range(nb):
            arr[i][j] = arr[i][j] ^ key[j]
    return arr

def genKey(n):
    word = []
    for i in range(n):
        word.append(random.randint(0,255))
    return word

def cyphr(inp, word, nr):
    state = create_state(inp,4)
    state = add_round_key(state,word[0:4],4)
    r = 1
    while(r<nr):
        state = sub_bytes(state, 4, sbox)
        state = shift_rows(state, 4, 1)
        state = mix_columns(state, 4)
        state = add_round_key(state,word[4*r:4*r+4],4)
        r+=1
    state = sub_bytes(state,4,sbox)
    state = shift_rows(state,4,1)
    state = add_round_key(state,word[nr*4:nr*4+4],4)
    state = pack_state(state,4)
    return state

def invCyphr(inp, word, nr):
    state = create_state(inp,4)
    state = add_round_key(state,word[nr*4:nr*4+4],4)
    state = shift_rows(state,4,-1)
    state = sub_bytes(state,4,sbox_inv)
    r = nr-1
    while(r>0):
        state = add_round_key(state, word[4*r:4*r+4], 4)
        state = mix_columns_inv(state, 4)
        state = shift_rows(state,4,-1)
        state = sub_bytes(state,4,sbox_inv)
        r-=1
    state = add_round_key(state,word[0:4],4)
    state = pack_state(state,4)
    return state

def main(k = genKey(16)):
    #k = genKey(16)
    if len(k) != 16:
        print("Incorrect Key Length. Key must be 16 elements long.")
    else:
        print("Using key: ")
        print(k)
        key = key_expansion(k,4,4,10)
        a = input("Enter Your Phrase: ")
        while(len(a)%16!=0):
            a+=" "
        arr = []
        carr = []
        marr = []
        coded = ""
        fin = ""
        for i in range(len(a)//16):
            arr.append(a[i*16:i*16+16])
        for e in range(len(arr)):
            carr.append(cyphr(phrase(arr[e]),key,10))
            #print(invphrase(carr[e]))
        for q in range(len(carr)):
            coded+=invphrase(carr[q])
        print("Coded Phrase: " + coded)
        for p in range(len(carr)):
            marr.append(invCyphr(carr[p],key,10))
        for q in range(len(marr)):
            fin+=invphrase(marr[q])
        print("Your Decrypted Phrase: " + fin)

print("Do your worst")
main()

